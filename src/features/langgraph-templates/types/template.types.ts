/**
 * LangGraph Template Types - Exact Backend POJO Mapping
 *
 * Complete type definitions matching src/models/template.py exactly
 * Includes ALL enums and HITL configuration
 */

// Import centralized enum types
import type {
  CompletionStrategy,
  HITLConfig as CentralizedHITLConfig
} from '../../../types/hitl.types';

// Re-export for convenience
export type {
  InterventionType,
  InterventionPoint,
  CompletionStrategy,
  ExecutionStatus
} from '../../../types/hitl.types';

// Backend Template Enums - Exact matches from template.py
export type AgentType = 'research' | 'analysis' | 'synthesis' | 'validation';

export type LLMModel = 'gpt-4' | 'gpt-3.5-turbo' | 'gpt-4-turbo';

// LangGraph-Native Enums
export type EdgeConditionType = 'always' | 'success' | 'failure' | 'custom' | 'conditional';

export type WorkflowMode = 'sequential' | 'parallel' | 'conditional' | 'langgraph';

export type TavilySearchDepth = 'basic' | 'advanced';
export type TavilyTimeRange = 'day' | 'week' | 'month' | 'year';
export type TavilyExtractDepth = 'basic' | 'advanced';
export type TavilyFormat = 'markdown' | 'text';

// HITL Configuration - Use centralized type
export type HITLConfig = CentralizedHITLConfig;

// LLM Configuration - Exact match from template.py lines 196-201
export interface LLMConfig {
  provider: 'openai';
  model: LLMModel;
  temperature: number; // 0.0-2.0
  max_tokens: number; // 100-4000
}

// Tavily Configuration - Exact match from template.py lines 151-193
export interface TavilyConfig {
  // API Selection - Individual toggles for each API
  search_api: boolean;
  extract_api: boolean;
  crawl_api: boolean; // BETA
  map_api: boolean; // BETA
  
  // Search API Configuration
  search_depth: TavilySearchDepth;
  max_results: number; // 1-50
  time_range?: TavilyTimeRange;
  include_domains?: string[];
  exclude_domains?: string[];
  country?: string;
  include_answer: boolean;
  include_images: boolean;
  include_raw_content: boolean;
  
  // Extract API Configuration
  extract_depth: TavilyExtractDepth;
  format: TavilyFormat;
  
  // Crawl API Configuration (BETA)
  crawl_instructions?: string;
  max_crawl_depth: number; // 1-5
  crawl_limit: number; // 1-100
  
  // Map API Configuration (BETA)
  map_instructions?: string;
  max_map_depth: number; // 1-3
  
  // Cost Management
  estimated_credits: number;
  max_credits_per_agent: number; // 1-50
  
  // Performance Settings
  timeout_seconds: number; // 10-120
  retry_attempts: number; // 0-3
  
  // Fallback Configuration
  fallback_enabled: boolean;
  continue_without_tavily: boolean;
}

// Agent Configuration - Exact match from template.py lines 204-225
export interface Agent {
  id?: string; // Auto-generated by backend
  name: string; // 1-100 chars
  type: AgentType;
  system_prompt: string; // 10-2000 chars
  user_prompt: string; // 10-1000 chars
  
  // API Configurations
  llm_config: LLMConfig;
  tavily_config: TavilyConfig;
  
  // HITL Configuration - CRITICAL: Was missing in original
  hitl_config?: HITLConfig;
  
  // Dependencies (for sequential workflows)
  depends_on?: string[];
  
  // Execution constraints
  timeout_seconds: number; // 30-3600, default 600
  retry_count: number; // 0-3, default 0
  priority: number; // 1-10, default 1 (for parallel execution ordering)
}

// LangGraph-Native Edge Definition
export interface Edge {
  from_node: string;
  to_node: string;
  condition_type: EdgeConditionType;
  condition?: string;
  condition_data?: Record<string, unknown>;
  
  // Edge metadata
  edge_id?: string;
  description?: string;
  weight?: number; // 0.0-10.0, default 1.0
}

// LangGraph-Native Graph Structure
export interface GraphStructure {
  nodes: string[];
  edges: Edge[];
  entry_point: string;
  exit_points?: string[];
  
  // Graph metadata
  graph_id?: string;
  description?: string;
  version?: string; // default "1.0"
  
  // Validation metadata
  is_valid?: boolean;
  validation_errors?: string[];
  validation_warnings?: string[];
}

// Workflow Configuration - Enhanced with LangGraph-native support
export interface WorkflowConfig {
  mode: WorkflowMode;
  
  // Legacy configuration (for backward compatibility)
  sequence?: string[]; // For sequential: ["agent1", "agent2"]
  parallel_groups?: string[][]; // For parallel: [["agent1", "agent2"], ["agent3"]]
  conditions?: Record<string, unknown>; // For conditional routing
  
  // LangGraph-native configuration
  graph_structure?: GraphStructure; // Explicit graph definition
  entry_point?: string; // Starting node (for LangGraph mode)
  state_schema?: Record<string, unknown>; // State object schema
  
  // Execution configuration
  max_concurrent_agents: number; // 1-10, default 3
  completion_strategy: CompletionStrategy;
  required_completions?: number; // For threshold strategy
  failure_threshold?: number; // Max failures before stopping workflow
  
  // Global workflow settings
  timeout_seconds: number; // 60-7200, default 1800
  retry_failed_agents: boolean;
  continue_on_failure: boolean; // Whether to continue if some agents fail
  
  // LangGraph compilation settings
  enable_checkpointing?: boolean;
  enable_streaming?: boolean;
  enable_time_travel?: boolean;
}

// Template - Exact match from template.py lines 251-278
export interface Template {
  // Core Identity
  id?: string; // Auto-generated by backend
  name: string; // 1-200 chars
  description: string; // max 1000 chars
  
  // Agent Configuration
  agents: Agent[]; // 1-5 agents
  
  // Workflow Configuration
  workflow: WorkflowConfig;
  
  // Metadata
  created_by?: string; // Set automatically by backend from JWT token
  created_by_name?: string; // User's display name for UI
  created_at?: string;
  updated_at?: string;
  
  // Execution Stats (optional)
  execution_count?: number;
  success_rate?: number;
  avg_cost?: number;
  avg_duration?: number;
  
  // Template Status
  is_active?: boolean;
  is_public?: boolean;
}

// Form validation types
export interface ValidationError {
  field: string;
  message: string;
  type?: 'required' | 'minLength' | 'maxLength' | 'range' | 'enum' | 'custom';
}

export interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: string[];
}

// Default configurations matching backend defaults
export const DEFAULT_LLM_CONFIG: LLMConfig = {
  provider: 'openai',
  model: 'gpt-4',
  temperature: 0.3,
  max_tokens: 2500,
};

export const DEFAULT_TAVILY_CONFIG: TavilyConfig = {
  // API Selection - Only search enabled by default
  search_api: false,
  extract_api: false,
  crawl_api: false,
  map_api: false,
  
  // Search API Configuration
  search_depth: 'basic',
  max_results: 3,
  time_range: undefined,
  include_domains: undefined,
  exclude_domains: undefined,
  country: undefined,
  include_answer: true,
  include_images: false,
  include_raw_content: false,
  
  // Extract API Configuration
  extract_depth: 'basic',
  format: 'markdown',
  
  // Crawl API Configuration (BETA)
  crawl_instructions: undefined,
  max_crawl_depth: 3,
  crawl_limit: 50,
  
  // Map API Configuration (BETA)
  map_instructions: undefined,
  max_map_depth: 2,
  
  // Cost Management
  estimated_credits: 0,
  max_credits_per_agent: 10,
  
  // Performance Settings
  timeout_seconds: 30,
  retry_attempts: 2,
  
  // Fallback Configuration
  fallback_enabled: true,
  continue_without_tavily: true,
};

// Import default from centralized types
export { DEFAULT_HITL_CONFIG } from '../../../types/hitl.types';

export const DEFAULT_AGENT: Omit<Agent, 'id' | 'name'> = {
  type: 'research',
  system_prompt: 'You are an expert research agent specializing in gathering comprehensive information from multiple sources.',
  user_prompt: 'Research the following topic thoroughly: {query}',
  llm_config: DEFAULT_LLM_CONFIG,
  tavily_config: DEFAULT_TAVILY_CONFIG,
  hitl_config: undefined, // Optional, not enabled by default
  depends_on: undefined,
  timeout_seconds: 600,
  retry_count: 0,
  priority: 1,
};

export const DEFAULT_WORKFLOW_CONFIG: WorkflowConfig = {
  mode: 'sequential',
  sequence: [],
  parallel_groups: undefined,
  max_concurrent_agents: 3,
  completion_strategy: 'all',
  required_completions: undefined,
  failure_threshold: undefined,
  conditions: undefined,
  timeout_seconds: 1800,
  retry_failed_agents: false,
  continue_on_failure: true,
};

export const DEFAULT_TEMPLATE: Omit<Template, 'id'> = {
  name: '',
  description: '',
  agents: [],
  workflow: DEFAULT_WORKFLOW_CONFIG,
  created_by: undefined,
  created_at: undefined,
  updated_at: undefined,
  execution_count: 0,
  success_rate: 0.0,
  avg_cost: 0.0,
  avg_duration: 0.0,
  is_active: true,
  is_public: false,
};

// Template Creation Data (for forms)
export interface TemplateCreationData {
  name: string;
  description: string;
  agents: Agent[];
  workflow: WorkflowConfig;
}

export const DEFAULT_TEMPLATE_CREATION_DATA: TemplateCreationData = {
  name: '',
  description: '',
  agents: [],
  workflow: DEFAULT_WORKFLOW_CONFIG,
};

// Agent type configurations for UI
export const AGENT_TYPE_CONFIGS = {
  research: {
    label: 'Research Agent',
    description: 'Gathers information and data from various sources',
    defaultSystemPrompt: 'You are an expert research agent specializing in gathering comprehensive information from multiple sources.',
    defaultUserPrompt: 'Research the following topic thoroughly: {query}',
  },
  analysis: {
    label: 'Analysis Agent',
    description: 'Analyzes data and provides insights',
    defaultSystemPrompt: 'You are an expert analysis agent specializing in data interpretation and insight generation.',
    defaultUserPrompt: 'Analyze the following data and provide key insights: {data}',
  },
  synthesis: {
    label: 'Synthesis Agent',
    description: 'Combines information from multiple sources',
    defaultSystemPrompt: 'You are an expert synthesis agent specializing in combining information from multiple sources into coherent conclusions.',
    defaultUserPrompt: 'Synthesize the following information into a comprehensive summary: {information}',
  },
  validation: {
    label: 'Validation Agent',
    description: 'Validates and verifies information accuracy',
    defaultSystemPrompt: 'You are an expert validation agent specializing in fact-checking and information verification.',
    defaultUserPrompt: 'Validate the accuracy of the following information: {information}',
  },
} as const;


// LLM model configurations for UI
export const LLM_MODEL_CONFIGS = {
  'gpt-4': {
    label: 'GPT-4',
    description: 'Most capable model, best for complex tasks',
  },
  'gpt-4-turbo': {
    label: 'GPT-4 Turbo',
    description: 'Faster GPT-4 variant with good performance',
  },
  'gpt-3.5-turbo': {
    label: 'GPT-3.5 Turbo',
    description: 'Fast and efficient, good for simpler tasks',
  },
} as const;

// Workflow mode configurations for UI
export const WORKFLOW_MODE_CONFIGS = {
  sequential: {
    label: 'Sequential',
    description: 'Agents execute one after another in order',
    icon: 'ArrowRight',
    complexity: 'Simple',
    useCase: 'Linear workflows where each step depends on the previous',
  },
  parallel: {
    label: 'Parallel',
    description: 'Agents execute simultaneously',
    icon: 'GitBranch',
    complexity: 'Medium',
    useCase: 'Independent tasks that can run concurrently',
  },
  conditional: {
    label: 'Conditional',
    description: 'Agents execute based on conditions and dependencies',
    icon: 'GitMerge',
    complexity: 'Advanced',
    useCase: 'Complex workflows with branching logic',
  },
  langgraph: {
    label: 'LangGraph Native',
    description: 'Full LangGraph workflow with explicit edges and conditions',
    icon: 'Network',
    complexity: 'Expert',
    useCase: 'Maximum control with native LangGraph features',
  },
} as const;

// Edge condition type configurations for UI
export const EDGE_CONDITION_CONFIGS = {
  always: {
    label: 'Always',
    description: 'Always proceed to next node',
    color: 'blue',
  },
  success: {
    label: 'On Success',
    description: 'Proceed only if previous node succeeded',
    color: 'green',
  },
  failure: {
    label: 'On Failure',
    description: 'Proceed only if previous node failed',
    color: 'red',
  },
  custom: {
    label: 'Custom Condition',
    description: 'Proceed based on custom condition',
    color: 'purple',
  },
  conditional: {
    label: 'Conditional',
    description: 'Complex conditional logic',
    color: 'orange',
  },
} as const;

// Completion strategy configurations for UI
export const COMPLETION_STRATEGY_CONFIGS = {
  all: {
    label: 'All Agents',
    description: 'Wait for all agents to complete successfully',
    icon: 'CheckCircle2',
  },
  majority: {
    label: 'Majority',
    description: 'Wait for majority of agents to complete',
    icon: 'Users',
  },
  any: {
    label: 'Any Agent',
    description: 'Complete when any agent finishes successfully',
    icon: 'Zap',
  },
  threshold: {
    label: 'Threshold',
    description: 'Complete when specific number of agents finish',
    icon: 'Target',
  },
  first_success: {
    label: 'First Success',
    description: 'Complete on first successful agent (parallel only)',
    icon: 'Trophy',
  },
} as const;
